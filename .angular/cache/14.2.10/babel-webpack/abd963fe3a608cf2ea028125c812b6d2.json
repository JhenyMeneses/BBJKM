{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/PC/Documents/GitHub/Vinculacion/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nlet ModClientComponent = class ModClientComponent {\n  constructor(ServiceCustomer, fbModClient) {\n    this.ServiceCustomer = ServiceCustomer;\n    this.fbModClient = fbModClient;\n    this.submitted = false;\n    this.errorserver = false;\n    this.ArrTypeContac = [];\n    this.ArrContac = [];\n    this.ArrCheckContac = [];\n    this.ArrPrefeContac = [];\n    this.upClient = this.fbModClient.group({\n      firstName: [''],\n      lastName: [''],\n      surnames: [''],\n      gender: [''],\n      bank: [''],\n      branch: [''],\n      countryBir: [''],\n      birthDate: [''],\n      stateBir: [''],\n      cityBir: [''],\n      nationalities: [''],\n      documentTypeDT: [''],\n      countryDT: [''],\n      cityDT: [''],\n      stateDT: [''],\n      expirationDate: [''],\n      documentNumberDT: [''],\n      maritalStatus: [''],\n      contact: [''],\n      contact2: [''],\n      contact3: [''],\n      economicActivity: [''],\n\n      /*       occupationType: [''],\r\n            employmentSituation: [''],\r\n            incomesType: [''],\r\n            currency: [''],\r\n            amount: [''], */\n      nameWP: [''],\n      documentTypeWP: [''],\n      documentNumberWP: [''],\n      workStartDateWP: [''],\n      addressNameWP: [''],\n      countryWP: [''],\n      stateWP: [''],\n      cityWP: [''],\n      addressNameD: [''],\n      cityD: [''],\n      stateD: [''],\n      countryD: [''],\n      personsInCharge: ['']\n    });\n  }\n\n  ngOnInit() {\n    this.getCustomersNew();\n  }\n\n  getCustomersNew() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log('ask someone if getupClient work');\n      console.log(_this.IDClient);\n\n      _this.ServiceCustomer.getCustomerById(_this.IDClient).subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (dataModCustumer) {\n          console.log('CONSULTA PERSONA');\n          console.log(dataModCustumer);\n          let lasname;\n\n          if (dataModCustumer['data']['surnames']) {\n            lasname = dataModCustumer['data']['surnames'];\n          } else {\n            lasname = '';\n          }\n\n          let TipoDoc;\n          let NumDoc = dataModCustumer['data']['identityDocuments'][0]['documentNumber'];\n\n          if (dataModCustumer['data']['identityDocuments'][0]['documentType']['id'] == 'CC') {\n            TipoDoc = \"1\";\n          } else {\n            TipoDoc = \"\";\n          }\n\n          _this.DocNum = TipoDoc + NumDoc;\n          let IDmanager;\n\n          if (dataModCustumer['data']['manager']['managerId']) {\n            IDmanager = dataModCustumer['data']['manager']['managerId'];\n          } else {\n            IDmanager = '';\n          }\n\n          let PIDname;\n\n          if (dataModCustumer['data']['partnerInformation']['name']) {\n            PIDname = dataModCustumer['data']['partnerInformation']['name'];\n          } else {\n            PIDname = '';\n          }\n\n          let PIDDTname;\n\n          if (dataModCustumer['data']['partnerInformation']['partnerIdentityDocuments'][0]['documentType']['name']) {\n            PIDDTname = dataModCustumer['data']['partnerInformation']['partnerIdentityDocuments'][0]['documentType']['name'];\n          } else {\n            PIDDTname = '';\n          }\n\n          let PIDdocNumber;\n\n          if (dataModCustumer['data']['partnerInformation']['partnerIdentityDocuments'][0]['documentNumber']) {\n            PIDdocNumber = dataModCustumer['data']['partnerInformation']['partnerIdentityDocuments'][0]['documentNumber'];\n          } else {\n            PIDdocNumber = '';\n          }\n\n          let Tam = dataModCustumer['data']['contactDetails'].length;\n          let cont = 0;\n\n          while (cont <= Tam - 1) {\n            let tc = dataModCustumer['data']['contactDetails'][cont]['contactType']['name'];\n\n            let tempTc = _this.ArrTypeContac.push(tc);\n\n            let nc = dataModCustumer['data']['contactDetails'][cont]['contact'];\n\n            let tempNc = _this.ArrContac.push(nc);\n\n            let pc = dataModCustumer['data']['contactDetails'][cont]['isPreferential'];\n\n            let tempPc = _this.ArrPrefeContac.push(pc);\n\n            let vc = dataModCustumer['data']['contactDetails'][cont]['isChecked'];\n\n            let tempVc = _this.ArrCheckContac.push(vc);\n\n            cont++;\n          }\n\n          _this.upClient.setValue({\n            clientId: dataModCustumer['data']['clientId'],\n            firstName: dataModCustumer['data']['firstName'],\n            lastName: dataModCustumer['data']['lastName'],\n            surnames: lasname,\n            birthDate: dataModCustumer['data']['birthDate'],\n            cityBir: dataModCustumer['data']['identityDocuments'][0]['city'],\n            countryBir: '',\n            stateBir: '',\n            nationalities: dataModCustumer['data']['nationalities'][0]['id'],\n            documentTypeDT: dataModCustumer['data']['identityDocuments'][0]['documentType']['name'],\n            documentNumberDT: dataModCustumer['data']['identityDocuments'][0]['documentNumber'],\n            countryDT: '',\n            stateDT: '',\n            expirationDate: '',\n            maritalStatus: '',\n            contact: '',\n            contact2: '',\n            contact3: '',\n            cityDT: dataModCustumer['data']['identityDocuments'][0]['city'],\n            addressNameD: dataModCustumer['data']['legalAddress']['addressName'],\n            cityD: dataModCustumer['data']['legalAddress']['city'],\n            stateD: dataModCustumer['data']['legalAddress']['state'],\n            countryD: dataModCustumer['data']['legalAddress']['country']['name'],\n            membershipDate: dataModCustumer['data']['membershipDate'],\n            gender: dataModCustumer['data']['gender']['id'],\n            bank: '',\n            branch: dataModCustumer['data']['bank']['branch']['name'],\n            managerId: IDmanager,\n            customerType: dataModCustumer['data']['customerType']['name'],\n            education: dataModCustumer['data']['education']['level'],\n            profession: dataModCustumer['data']['profession'],\n            cardname: dataModCustumer['data']['cardName'],\n            namePI: PIDname,\n            documentTypePI: PIDDTname,\n            documentNumberPI: PIDdocNumber,\n            personsInCharge: dataModCustumer['data']['personsInCharge']\n          });\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n\n      console.log(_this.DocNum);\n      return _this.DocNum;\n    })();\n  }\n\n  updateClient() {\n    console.log('ask someone if getupdateClient work');\n    const dataClient = {\n      firstName: this.upClient.value.firstName,\n      lastName: this.upClient.value.lastName,\n      surnames: this.upClient.value.surnames,\n      gender: {\n        id: this.upClient.value.gender\n      },\n      bank: {\n        branch: {\n          id: this.upClient.value.branch\n        },\n        id: this.upClient.value.bank\n      },\n      birthData: {\n        country: {\n          id: this.upClient.value.countryBir\n        },\n        birthDate: this.upClient.value.birthDate,\n        state: {\n          id: this.upClient.value.stateBir\n        },\n        city: this.upClient.value.cityBir\n      },\n      nationalities: [{\n        id: this.upClient.value.nationalities\n      }],\n      identityDocuments: [{\n        documentType: {\n          id: this.upClient.value.documentTypeDT\n        },\n        country: {\n          id: this.upClient.value.countryDT\n        },\n        city: this.upClient.value.cityDT,\n        state: {\n          id: this.upClient.value.stateDT\n        },\n        expirationDate: this.upClient.value.expirationDate,\n        documentNumber: this.upClient.value.documentNumberDT\n      }],\n      maritalStatus: {\n        id: this.upClient.value.maritalStatus\n      },\n      contactDetails: [{\n        contact: this.upClient.value.contact,\n        contactType: {\n          id: \"MOBILE_NUMBER\"\n        }\n      }, {\n        contact: this.upClient.value.contact2,\n        contactType: {\n          id: \"EMAIL\"\n        }\n      }, {\n        contact: this.upClient.value.contact3,\n        contactType: {\n          id: \"OFFICE_NUMBER\"\n        }\n      }],\n      economicData: {\n        economicActivity: {\n          id: this.upClient.value.economicActivity\n        },\n        occupationType: {\n          id: this.upClient.value.occupationType\n        },\n        employmentSituation: this.upClient.value.employmentSituation,\n        incomes: [{\n          incomesType: {\n            id: this.upClient.value.incomesType\n          },\n          incomesValue: {\n            currency: this.upClient.value.currency,\n            amount: this.upClient.value.amount\n          }\n        }],\n        workPlace: {\n          name: this.upClient.value.nameWP,\n          taxpayerIdentification: {\n            documentType: {\n              id: this.upClient.value.documentTypeWP\n            },\n            documentNumber: this.upClient.value.documentNumberWP\n          },\n          workStartDate: this.upClient.value.workStartDateWP,\n          address: {\n            location: {\n              addressName: this.upClient.value.addressNameWP,\n              country: {\n                id: this.upClient.value.countryWP\n              },\n              state: {\n                id: this.upClient.value.stateWP\n              },\n              city: this.upClient.value.cityWP\n            }\n          }\n        }\n      },\n      addresses: [{\n        location: {\n          addressName: this.upClient.value.addressNameD,\n          city: this.upClient.value.cityD,\n          state: {\n            id: this.upClient.value.stateD\n          },\n          country: {\n            id: this.upClient.value.countryD\n          }\n        }\n      }],\n      personsInCharge: this.upClient.value.personsInCharge\n    };\n    this.submitted = true;\n    /*     if(this.upClient.valid){\r\n          this.stateValid = \"Formulario Completo\";\r\n        }else{\r\n          this.stateValid = \"Formulario Incompleto\";\r\n          return;\r\n        } */\n\n    this.ServiceCustomer.updateCustomer(this.DocNum, dataClient).subscribe(data => {\n      console.log(data);\n    }, error => {\n      this.errorserver = true;\n      console.log(\"¡¡Cliente NO ACTUALIZADO!!\");\n    });\n  }\n\n  closeUpdate() {\n    this.ServiceCustomer.$modalModify.emit(false);\n  }\n\n};\n\n__decorate([Input()], ModClientComponent.prototype, \"IDClient\", void 0);\n\nModClientComponent = __decorate([Component({\n  selector: 'app-mod-client',\n  templateUrl: './mod-client.component.html',\n  styleUrls: ['./mod-client.component.css']\n})], ModClientComponent);\nexport { ModClientComponent };","map":{"version":3,"mappings":"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","names":["Component","Input","ModClientComponent","constructor","ServiceCustomer","fbModClient","upClient","group","firstName","lastName","surnames","gender","bank","branch","countryBir","birthDate","stateBir","cityBir","nationalities","documentTypeDT","countryDT","cityDT","stateDT","expirationDate","documentNumberDT","maritalStatus","contact","contact2","contact3","economicActivity","nameWP","documentTypeWP","documentNumberWP","workStartDateWP","addressNameWP","countryWP","stateWP","cityWP","addressNameD","cityD","stateD","countryD","personsInCharge","ngOnInit","getCustomersNew","console","log","IDClient","getCustomerById","subscribe","dataModCustumer","lasname","TipoDoc","NumDoc","DocNum","IDmanager","PIDname","PIDDTname","PIDdocNumber","Tam","length","cont","tc","tempTc","ArrTypeContac","push","nc","tempNc","ArrContac","pc","tempPc","ArrPrefeContac","vc","tempVc","ArrCheckContac","setValue","clientId","membershipDate","managerId","customerType","education","profession","cardname","namePI","documentTypePI","documentNumberPI","updateClient","dataClient","value","id","birthData","country","state","city","identityDocuments","documentType","documentNumber","contactDetails","contactType","economicData","occupationType","employmentSituation","incomes","incomesType","incomesValue","currency","amount","workPlace","name","taxpayerIdentification","workStartDate","address","location","addressName","addresses","submitted","updateCustomer","data","error","errorserver","closeUpdate","$modalModify","emit","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\PC\\Documents\\GitHub\\Vinculacion\\src\\app\\mod-client\\mod-client.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomerService } from '../services/customer.service';\nimport { IModClient } from '../Interface/modClient';\nimport { ICreateClients } from '../Interface/createClient';\nimport { IConsultById } from '../Interface/consultById';\n\n@Component({\n  selector: 'app-mod-client',\n  templateUrl: './mod-client.component.html',\n  styleUrls: ['./mod-client.component.css']\n})\nexport class ModClientComponent implements OnInit {\n  @Input() IDClient! : string;\n  upClient : FormGroup;\n  dataModCustumer! : ICreateClients;\n  submitted = false;\n  errorserver = false;\n  DocNum! : string;\n\n  ArrTypeContac: any[] = [];\n  ArrContac: any[] = [];\n  ArrCheckContac: any[] = [];\n  ArrPrefeContac: any[] = [];\n\n  constructor(private ServiceCustomer : CustomerService, private fbModClient : FormBuilder) { \n    this.upClient = this.fbModClient.group({\n      firstName: [''], \n      lastName: [''],\n      surnames: ['', ],\n      gender: [''],\n      bank: [''],\n      branch: [''],\n      countryBir: [''],\n      birthDate: [''],\n      stateBir: [''],\n      cityBir: [''],\n      nationalities: [''],\n      documentTypeDT: [''],\n      countryDT: [''],\n      cityDT: [''],\n      stateDT: [''],\n      expirationDate: [''],\n      documentNumberDT: [''],\n      maritalStatus: [''],\n      contact: [''],\n      contact2: [''],\n      contact3: [''],\n      economicActivity: [''],\n/*       occupationType: [''],\n      employmentSituation: [''],\n      incomesType: [''],\n      currency: [''],\n      amount: [''], */\n      nameWP: [''],\n      documentTypeWP: [''],\n      documentNumberWP: [''],\n      workStartDateWP: [''],\n      addressNameWP: [''],\n      countryWP: [''],\n      stateWP: [''],\n      cityWP: [''],\n      addressNameD: [''],\n      cityD: [''],\n      stateD: [''],\n      countryD: [''],\n      personsInCharge: [''],\n    });\n  }\n\n  ngOnInit(): void {\n    this.getCustomersNew();\n  }\n\n  async getCustomersNew(){\n    console.log('ask someone if getupClient work');\n    console.log(this.IDClient);\n    this.ServiceCustomer.getCustomerById(this.IDClient).subscribe(async (dataModCustumer) => {\n      console.log('CONSULTA PERSONA');\n      console.log(dataModCustumer);   \n  \n      let lasname;\n      if (dataModCustumer['data']['surnames']) {\n        lasname = dataModCustumer['data']['surnames'];\n      } else {\n        lasname = '';\n      }\n\n      let TipoDoc;\n      let NumDoc = dataModCustumer['data']['identityDocuments'][0]['documentNumber'];\n      if(dataModCustumer['data']['identityDocuments'][0]['documentType']['id'] == 'CC'){\n        TipoDoc = \"1\"\n      }else{\n        TipoDoc = \"\"\n      }\n\n      this.DocNum = TipoDoc+NumDoc; \n      \n      let IDmanager;\n      if (dataModCustumer['data']['manager']['managerId']) {\n        IDmanager = dataModCustumer['data']['manager']['managerId'];\n      } else {\n        IDmanager = '';\n      }\n\n      let PIDname ;\n      if (dataModCustumer['data']['partnerInformation']['name']) {\n        PIDname = dataModCustumer['data']['partnerInformation']['name'];\n      } else {\n        PIDname = '';\n      }\n\n      let PIDDTname ;\n      if (dataModCustumer['data']['partnerInformation']['partnerIdentityDocuments'][0]['documentType']['name']) {\n        PIDDTname = dataModCustumer['data']['partnerInformation']['partnerIdentityDocuments'][0]['documentType']['name'];\n      } else {\n        PIDDTname = '';\n      }\n\n      let PIDdocNumber ;\n      if (dataModCustumer['data']['partnerInformation']['partnerIdentityDocuments'][0]['documentNumber']) {\n        PIDdocNumber = dataModCustumer['data']['partnerInformation']['partnerIdentityDocuments'][0]['documentNumber'];\n      } else {\n        PIDdocNumber = '';\n      }\n\n\n      let Tam = dataModCustumer['data']['contactDetails'].length;\n      let cont = 0;\n      while (cont <= Tam-1) {\n        let tc = dataModCustumer['data']['contactDetails'][cont]['contactType']['name'];\n        let tempTc = this.ArrTypeContac.push(tc);\n        let nc = dataModCustumer['data']['contactDetails'][cont]['contact'];\n        let tempNc = this.ArrContac.push(nc);\n        let pc = dataModCustumer['data']['contactDetails'][cont]['isPreferential'];\n        let tempPc = this.ArrPrefeContac.push(pc);\n        let vc = dataModCustumer['data']['contactDetails'][cont]['isChecked'];\n        let tempVc = this.ArrCheckContac.push(vc);\n        cont++;\n      }\n\n      this.upClient.setValue({\n        clientId: dataModCustumer['data']['clientId'],\n        firstName: dataModCustumer['data']['firstName'],\n        lastName: dataModCustumer['data']['lastName'],\n        surnames: lasname,\n        birthDate: dataModCustumer['data']['birthDate'],\n        cityBir: dataModCustumer['data']['identityDocuments'][0]['city'],\n        countryBir:'',\n        stateBir: '',\n        nationalities: dataModCustumer['data']['nationalities'][0]['id'],\n        documentTypeDT: dataModCustumer['data']['identityDocuments'][0]['documentType']['name'],\n        documentNumberDT: dataModCustumer['data']['identityDocuments'][0]['documentNumber'],\n        countryDT:'',\n        stateDT:'',\n        expirationDate:'',\n        maritalStatus:'',\n        contact: '',\n        contact2: '',\n        contact3: '',\n        cityDT: dataModCustumer['data']['identityDocuments'][0]['city'],\n        addressNameD: dataModCustumer['data']['legalAddress']['addressName'],\n        cityD: dataModCustumer['data']['legalAddress']['city'],\n        stateD: dataModCustumer['data']['legalAddress']['state'],\n        countryD: dataModCustumer['data']['legalAddress']['country']['name'],\n        membershipDate: dataModCustumer['data']['membershipDate'],\n        gender: dataModCustumer['data']['gender']['id'],\n        bank: '',\n        branch: dataModCustumer['data']['bank']['branch']['name'],\n        managerId: IDmanager,\n        customerType: dataModCustumer['data']['customerType']['name'],\n        education: dataModCustumer['data']['education']['level'],\n        profession: dataModCustumer['data']['profession'],\n        cardname: dataModCustumer['data']['cardName'],\n        namePI: PIDname,\n        documentTypePI: PIDDTname,\n        documentNumberPI: PIDdocNumber,\n        personsInCharge: dataModCustumer['data']['personsInCharge'],\n      });    \n       \n    });\n    console.log(this.DocNum);\n\n    return this.DocNum;\n  }\n\n  updateClient(){\n    console.log('ask someone if getupdateClient work');\n\n    const dataClient : ICreateClients = {\n      firstName: this.upClient.value.firstName, \n      lastName: this.upClient.value.lastName,\n      surnames: this.upClient.value.surnames,\n      gender: { id: this.upClient.value.gender },\n      bank: {\n        branch: { id: this.upClient.value.branch },\n        id: this.upClient.value.bank,\n      },\n      birthData: {\n        country: { id: this.upClient.value.countryBir },\n        birthDate: this.upClient.value.birthDate,\n        state: { id: this.upClient.value.stateBir },\n        city: this.upClient.value.cityBir,\n      },\n      nationalities: [{ id: this.upClient.value.nationalities }],\n      identityDocuments: [\n        {\n          documentType: { id: this.upClient.value.documentTypeDT },\n          country: { id: this.upClient.value.countryDT },\n          city: this.upClient.value.cityDT,\n          state: { id: this.upClient.value.stateDT },\n          expirationDate: this.upClient.value.expirationDate,\n          documentNumber: this.upClient.value.documentNumberDT,\n        },\n      ],\n      maritalStatus: { id: this.upClient.value.maritalStatus },\n      contactDetails: [\n        {\n          contact: this.upClient.value.contact,\n          contactType: { id: \"MOBILE_NUMBER\" },\n        },\n        {\n          contact: this.upClient.value.contact2,\n          contactType: { id: \"EMAIL\" },\n        },\n        {\n          contact: this.upClient.value.contact3,\n          contactType: { id: \"OFFICE_NUMBER\" },\n        },\n      ],\n      economicData: {\n        economicActivity: { id: this.upClient.value.economicActivity },\n        occupationType: { id: this.upClient.value.occupationType },\n        employmentSituation: this.upClient.value.employmentSituation,\n        incomes: [\n          {\n            incomesType: { id: this.upClient.value.incomesType },\n            incomesValue: {\n              currency: this.upClient.value.currency,\n              amount: this.upClient.value.amount,\n            },\n          },\n        ],\n        workPlace: {\n          name: this.upClient.value.nameWP,\n          taxpayerIdentification: {\n            documentType: { id: this.upClient.value.documentTypeWP },\n            documentNumber: this.upClient.value.documentNumberWP,\n          },\n          workStartDate: this.upClient.value.workStartDateWP,\n          address: {\n            location: {\n              addressName: this.upClient.value.addressNameWP,\n              country: { id: this.upClient.value.countryWP },\n              state: { id: this.upClient.value.stateWP },\n              city: this.upClient.value.cityWP,\n            },\n          },\n        },\n      },\n      addresses: [\n        {\n          location: {\n            addressName: this.upClient.value.addressNameD,\n            city: this.upClient.value.cityD,\n            state: { id: this.upClient.value.stateD },\n            country: { id: this.upClient.value.countryD },\n          },\n        },\n      ],\n      personsInCharge: this.upClient.value.personsInCharge,\n    };\n    this.submitted = true;\n\n/*     if(this.upClient.valid){\n      this.stateValid = \"Formulario Completo\";\n    }else{\n      this.stateValid = \"Formulario Incompleto\";\n      return;\n    } */\n    \n    this.ServiceCustomer.updateCustomer(this.DocNum,dataClient).subscribe(data => {\n      console.log(data);\n    }, error => {\n      this.errorserver = true;\n      console.log(\"¡¡Cliente NO ACTUALIZADO!!\");\n    });\n\n  }\n\n  closeUpdate(){\n    this.ServiceCustomer.$modalModify.emit(false); \n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}